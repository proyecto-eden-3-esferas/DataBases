[
  {
    "term": "falsy values",
    "language": "javascript",
    "lang": "en",
    "definition": "values that resolve to the Boolean false",
    "opposite": "truthy values",
    "list": [ "false", "0", "empty string", "null", "undefined", "NaN"],
    "test": null,
    "examples": []
  },

  {
    "name": "in",
    "language": "javascript",
    "type": "operator",
    "syntax": "PROPERTY_NAME in OBJECT",
    "action": "returns true for direct or inherited properties",
    "examples": [
      {"code": [
"const example = {};",
"example.prop = \"exists\";",

"\"prop\" in example; // true",
"\"toString\" in example; // true",
"\"hasOwnProperty\" in example; // true"
      ]}
    ]
  },
  {
    "name": "Object.hasOwn(OBJ, PROPERTY)",
    "language": "javascript",
    "type": "method",
    "action": "returns true for direct, non-inherited properties",
    "examples": [
      {"code": [
"const example = {};",
"example.prop = \"exists\";",

"// `hasOwn` will only return true for direct properties:",
"Object.hasOwn(example, \"prop\"); // true",
"Object.hasOwn(example, \"toString\"); // false",
"Object.hasOwn(example, \"hasOwnProperty\"); // false"
      ]}
    ],
    "see": ["in"]
  },

  {
    "title": "checking for the existence of a property",
    "methods": [
      {"description": "Object.hasOwn(OBJ, PROPERTY)", "example": []},
      {"description": "through the 'in' operator", "syntax": "", "example": [
"const hero = { name: 'Batman' };",
"console.log('toString' in hero);              // => true",
"console.log(hero.hasOwnProperty('toString')); // => false"]},
      {"description": "comparing with 'undefined'", "example": [
"const hero = { name: 'Batman' };",
"console.log(hero.name !== undefined);     // => true"
      ]}
    ]
  },

  {
  "difference": ["for/in", "for/of"],
  "language": "javascript",
  "points": [
    ["iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties",1],
    ["uses property enumeration ","uses the array's iterator"]
  ],
  "examples": [
    {
     "code": [
"const object = { a: 1, b: 2, c: 3 };",

"for (const property in object) {",
"  console.log(`${property}: ${object[property]}`);",
"}"],
     "output": [
"// \"a: 1\"",
"// \"b: 2\"",
"// \"c: 3\"",
"    ]}," ]
     },

    {"code": [
    ],
     "output": []},

    {"code": [
    ],
     "output": []},

    {"code": [
    ],
     "output": []}
  ],
  "see-also": []
  },
  {
    "name": "Array.sort()",
    "language": "javascript",
    "keywords": ["sort", "in-place"],
    "lang": "en",
    "returns": "reference to the sorted array",
    "prototypes": [
      "sort()",
      "sort(compareFunction(a,b))"
    ],
    "action": "in-place sorting",
    "notes": [
      "the comparison function should return a number such that a negative value indicates that a should come before b, a positive value indicates that a should come after b, and zero or NaN indicates that a and b are considered equal."
    ],
    "related-to": ["Array.reverse()", "Array.toSorted()"]
  },
  {
    "title": "characters allowed in javascript identifiers",
    "language": "javascript",
    "start-characters": ["letters", "_"],
    "non-start-characters": ["letters", "digits", "_"]
  },
  {
    "term": "innerHTML",
    "language": "javascript",
    "field": "programming",
    "definition": "the raw HTML markup inside an element",
    "notes": [
      "innerHTML does not ignore styling or return only visible text"
    ],
    "see": ["value"]
  },
  {
    "term": "value",
    "language": "javascript",
    "field": "programming",
    "definition": "holds the user's value entered or selected in a form field",
    "notes": [
      "specifically for form elements like <input>, <select>, and <textarea>"
    ],
    "see": ["innerHTML"]
  },
  {
    "title": "javascript escape sequences",
    "field": "computing",
    "subfield": "escape sequences",
    "language": "javascript",
    "list": [
      {"sequence": "\\'", "interpretation": "single quote"},
      {"sequence": "\\\"", "interpretation": "double quote"},
      {"sequence": "\\\\", "interpretation": "backslash"},
      {"sequence": "\\n", "interpretation": "new line"},
      {"sequence": "\\r", "interpretation": "carriage return"},
      {"sequence": "\\t", "interpretation": "tab"},
      {"sequence": "\\b", "interpretation": "backspace"},
      {"sequence": "\\f", "interpretation": "form feed"},
      {"sequence": "\\v", "interpretation": "vertical tab"},
      {"sequence": "\\0", "interpretation": "null character (U+0000 <control-0000> ) (only if the next character is not a decimal digit; else it is an octal escape sequence)"},
      {"sequence": "\\xFF", "interpretation": "character represented by the hexadecimal byte FF"},
      {"sequence": "", "interpretation": ""},

      {"sequence": "", "interpretation": ""},
      {"sequence": "", "interpretation": ""},
      {"sequence": "", "interpretation": ""}
    ]
  },

  {
    "name": "npm",
    "field": "computing",
    "subfield": "node.js",
    "language": "javascript",
    "definition": "the standard package manager for Node.js",
    "description": "npm installs, updates and manages downloads of dependencies of your project"
  }

]
